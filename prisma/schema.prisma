generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id   Int    @id @default(autoincrement())
  name String
}

model User {
  id              String        @id @unique

  email           String        @unique @db.VarChar(255)

  boards          Board[]

  session  Session[]
  Key      Key[]

  @@map("user")
}

model Session {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
    @@index([user_id])
    @@map("session")
}

model Key {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    primary         Boolean
    expires         BigInt?
    user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)
    @@index([user_id])
    @@map("key")
}

model Board {
  id              String        @id @default(cuid())

  name            String        @db.VarChar(75)

  userId          String
  user            User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  columns         Column[]

  updatedAt       DateTime      @updatedAt
  createdAt       DateTime      @default(now())
}

model Column {
  id              String        @id @default(cuid())

  name            String        @db.VarChar(75)
  order           Int           @db.SmallInt  @default(autoincrement())

  boardId         String
  board           Board         @relation(fields: [boardId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  tasks           Task[]

  updatedAt       DateTime      @updatedAt
  createdAt       DateTime      @default(now())
}

model Task {
  id              String        @id @default(cuid())

  title           String        @db.VarChar(75)
  description     String        @db.Text
  order           Int           @db.SmallInt  @default(autoincrement())
  endsAt           DateTime?

  columnId        String
  column          Column        @relation(fields: [columnId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  subTasks        SubTask[]

  updatedAt       DateTime      @updatedAt
  createdAt       DateTime      @default(now())
}

model SubTask {
  id              String        @id @default(cuid())

  name            String        @db.VarChar(75)
  order           Int           @db.SmallInt  @default(autoincrement())

  taskID          String
  task            Task          @relation(fields: [taskID], references: [id], onUpdate: Cascade, onDelete: Cascade)

  updatedAt       DateTime      @updatedAt
  createdAt       DateTime      @default(now())
}